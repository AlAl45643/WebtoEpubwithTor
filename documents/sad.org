Software Architecture Document
* Changelog
| Version Release | Major Changes                                                                                                                                                                                                                                                                                                                                         | Date         |
|-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------|
|             1.0 | Initial release of the document                                                                                                                                                                                                                                                                                                                       | Mar 21, 2025 |
|             1.1 | Images now export to relative file path; Seleniumed Tor Browser module added to Building Block Level 2; Name changes for items                                                                                                                                                                                                                        | Apr 30, 2025 |
|             1.2 | TR3: Selenium Deanonymization removed due to mitigation being too difficult;                                                                                                                                                                                                                                                                          | May 12, 2025 |
|             1.3 | Sentence revisions; Added Windows 10 Compatibility Constraint; Changed Table 7. <<subsystem>> to <<module>>; Removed Building Block Level 2; Fixed runtime view function names; Removed Domain Model section; Linked cloudflare fallback behavior test case; Added revised Architecture Decision 4; Changed manual HTML to XHTML as mitigation to TR3 | May 27, 2025 |

* Introduction and Goals
This SAD describes the design of the WebtoEpubwithTor software (WET). This WET shall automate the task of exporting referenced webpages within a website into a Electronic Publication (EPUB). The goal of the WET project is to save time by automating a routine task, ensure anonymity when retrieving content, and showcase the developers' skill.

** Requirements Overview
Table 1. General Requirements
| ID   | Feature                                                                                                             |
|------+---------------------------------------------------------------------------------------------------------------------|
| PF-1 | The product shall use standard tor relays to retrieve online content.                                               |
| PF-2 | The product shall collect specific hyperlinks within a website using a matching pattern given by the user.          |
| PF-3 | The product shall save the specified webpages' content.                                                             |
| PF-4 | The product shall assemble the saved webpages into a single continuous EPUB file in an order specified by the user. |
| PF-5 | The product shall export the completed EPUB file to the user's preferred folder.                                    |

** Quality Goals
Table 2. Quality Goals
| Quality Goal                             | Motivation/Description                                                   |
|------------------------------------------+--------------------------------------------------------------------------|
| Functions for most sites (Functionality) | Our product needs to be able to access most sites or it will be useless. |
| Anonymity                                | To ensure that our interests are kept to ourselves.                      |

** Stakeholders
Table 3. Stakeholders
| Role      | Goal                                               |
|-----------+----------------------------------------------------|
| Users     | Looking to automate a repetitive task anonymously. |
| Employers | Understand the developers' skill.                  |
| Ali Ali   | Showcase and improve his skills, also a user.      |

* Architecture Constraints
Table 4. Software and Programming Constraints
| ID  | Constraint                                                                                                           | Background and / or motivation                                                             |
|-----+----------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------|
| TC1 | Implementation in C#                                                                                                 | The application should showcase the developers' C# skill.                                  |
| TC2 | Third party software must be available under an compatible open source license and installable via a package manager | The source code must be open for examination to guarentee the users information is secure. |

Table 5. Operating System Constraints
| ID  | Constraint                                        | Explanation                                                                  |
|-----+---------------------------------------------------+------------------------------------------------------------------------------|
| TC3 | Fedora Workstation Edition (latest) Compatibility | The application should be compatible with Fedora Workstation Edition OS. |
| TC4 | Windows 10 (latest) Compatibility                 | The application should be compatible with Windows 10 OS.                 |

* Context and Scope
** Business Context
#+BEGIN_SRC plantuml :file ./B-1.png
  @startuml
  skinparam AgentBorderThickness 2
  skinparam shadowing true
  skinparam defaultTextAlignment center
  skinparam AgentStereotypeFontSize 14
  skinparam footerFontSize 15
  skinparam footerFontColor Black
  component "**WET**" as WET <<System>>
  database "Requested Webpage" as Host <<Category>> <<Host>>
  note top : availability risk
  actor "User" as user


  user -do- WET
  WET -ri- Host : Retrieve Webpage(s)
  note top on link : anonymity quality

  center footer "**WET Business Context**"
  @enduml
#+End_SRC

[[file:./B-1.png]]

Table 6. Business Context Description
| Actor                                   | Description                                                                                                                                           |
|-----------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------|
| User                                    | User that requests an epub assembled from a collection of webpages which are referenced within another webpage(s).                                    |
| <<Category>> <<Host>> Requested Webpage | Webpages requested by the user. May not be available either due to not existing or being blocked by the host.                                         |
| <<System>> WET                          | WET is our system that anonymously searches a webpage for links based on user given pattern and assembles the webpages from those links into an epub. |

** Technical Context
#+BEGIN_SRC plantuml :file ./B-2.png
  @startuml
  skinparam AgentBorderThickness 2
  skinparam shadowing true
  skinparam defaultTextAlignment center
  skinparam AgentStereotypeFontSize 14
  skinparam footerFontSize 15
  skinparam footerFontColor Black
  component "**WET**" as WET <<System>>
  database "Requested Webpage" as Host <<Category>> <<Host>>
  note top : availability risk
  component "Command-Line Interface" as comm <<Application>>
  interface "Tor relay" as tor
  note top : anonymity quality

  comm -do- WET
  comm -[hidden]do- WET
  WET -ri- tor : HTTP/S
  tor -ri- Host : HTTP/S

  center footer "**WET Technical Context**"
  @enduml
#+END_SRC

[[file:./B-2.png]]

Table 7. Technical Context Description
| Actor                                   | Description                                                                                                                                       |
|-----------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------|
| <<Application>> Command-Line Interface  | A command-line (CLI) interface to communicate with WET such as Bash, Zsh, or Command Prompt.                                                      |
| <<System>> WET                          | Our system that is controlled by a CLI which retrieves requested webpages through a tor relay.                                                    |
| <<Protocol>> Tor relay                  | A protocol that transmits encrypted traffic anonymously by routing it through relays which make it difficult to trace the origin of information . |
| <<Category>> <<Host>> Requested Webpage | Webpages requested by the user. May not be available either due to not existing or being blocked by the host.                                     |

* Solution Strategy
Table 8. Solution Strategy Approach
| Quality Goal                      | Solution Approach                                                                                | Link to Details |
|-----------------------------------+--------------------------------------------------------------------------------------------------+-----------------|
| Usability (75% Site Acessibility) | Imitate user browsing by scraping through a web browser and handover to user to bypass captchas. | [[*Cloudflare]]     |
| Anonymity (Tor Relays)            | Use Tor Relays to access the internet.                                                           | [[*Tor Relays]]     |

* Building Block View
** Level 1
#+BEGIN_SRC plantuml :file ./B-3.png
  @startuml
  skinparam shadowing true
  skinparam defaulttextalignment center
  skinparam componentstereotypefontsize 13
  skinparam footerfontsize 15
  skinparam footerFontColor black
  skinparam folderstereotypefontsize 13


  component "WET" as wet <<system>> {
          portin "Command Input/Output" as comm
          portout "Internet Port" as internet
          component "Retrieve Requests" as retrieve <<module>>
          component "Create Requests" as request <<module>>

          comm --> request
          retrieve -up-> request
          request -do-> retrieve
          retrieve --> internet


  }

  center footer "**Building Block View - Level 1: Overview**"
  @enduml
#+END_SRC

[[file:./B-3.png]]

Table 9. Building Block View Level 1 Description

| Actor                        | Description                                                                                     |
|------------------------------+-------------------------------------------------------------------------------------------------|
| <<module>> Create Requests   | Responsible for assembling the list of links that will be sent to <<module>> Retrieve Requests. |
| <<module>> Retrieve Requests | Responsible for retrieving the links and webpages requested from <<module>> Create Requests.    |
| Command Input/Output         | Port for command input and command output through a Command-Line Interface.                     |
| Internet Port                | Port for content requested from internet.                                                       |

* Runtime View
** Typical Runtime View

#+BEGIN_SRC plantuml :file ./B-5.png
  @startuml
  skinparam shadowing true
  skinparam defaulttextalignment center
  skinparam participantstereotypefontsize 13
  skinparam footerfontsize 15
  skinparam footerFontColor black
  skinparam folderstereotypefontsize 13

  participant "Client" as client
  participant "Create Requests" as request <<module>>
  participant "Retrieve Requests" as retrieve <<module>>

  client -> request : "RequestLinks(link, regex)"
  activate client
          activate request
                  request -> retrieve : "RetrieveLinks(link, regex)"
                  activate retrieve
                          retrieve --> request
                  deactivate request
          deactivate retrieve

          client -> request : "Print()"
          activate request
                  request --> client
                  client -> request : "Remove(index)"
                  client -> request : "Print()"
                  request --> client
                  client -> request : "ExportRequest(exportToLocation)"
                  request -> retrieve : "ExportToEpub(requestFilePath, exportToPath)"
                  activate retrieve
                  deactivate request
          deactivate retrieve
  deactivate client

  center footer "**Runtime View: Typical Use**"
  @enduml
#+END_SRC


[[file:./B-5.png]]

A plausible runtime view that an average user may run would be:
1) Retrieving links from a website
2) Modifying the retrieved links by removing specific items
3) Exporting the retrieved links to an epub

** Captcha Runtime View
#+BEGIN_SRC plantuml :file ./B-6.png
  skinparam shadowing true
  skinparam defaulttextalignment center
  skinparam participantstereotypefontsize 13
  skinparam footerfontsize 15
  skinparam footerFontColor black
  skinparam folderstereotypefontsize 13

  participant "Client" as client
  participant "Create Requests" as request <<subsystem>>
  participant "Retrieve Requests" as retrieve <<subsystem>>

  client -> request : "RequestLinks(link, regex)"
  activate client
          activate request
                  request -> retrieve : "RetrieveLinks(requestFilePath, link, regex)"
                  activate retrieve
                          retrieve --> request
                          retrieve -> client : "solve captcha"
                          client --> retrieve
                  deactivate request
          deactivate retrieve


          client -> request : "Print()"
          activate request
                  request --> client
                  client -> request : "ExportRequest(exportToLocation)"
                  request -> retrieve : "ExportToEpub(requestFilePath, exportToPath)"
                  activate retrieve
                  deactivate request
                  retrieve -> client : "solve captcha(s)"
                  client --> retrieve
          deactivate retrieve
  deactivate client



  center footer "**Runtime View: Captcha**"
#+END_SRC


[[file:./B-6.png]]

A special but common runtime view would be a website requesting a captcha to access its contents. It would need to be handled by:
1) Detecting that a captcha has been requested
2) Sending the captcha to the user to solve

* Deployment View
** Infrastructure
#+BEGIN_SRC plantuml :file ./B-7.png
  skinparam shadowing true
  skinparam defaulttextalignment center
  skinparam componentstereotypefontsize 13
  skinparam footerfontsize 15
  skinparam footerFontColor black
  skinparam folderstereotypefontsize 13

  left to right direction
  'devices
  node "Linux-PC" as hwd <<Device>>  {

          'environments
          node "Desktop Environment" as env <<Environment>> {

                  'service
                  component "Command-Line Interface" as comm <<Service>>

                  'system
                  component "WET" as wet <<System>> <<Executable>>

                  'artifacts
                  artifact "output.epub" as epub


          }
  }

  'device
  node "Webpage Server" as web <<Category>> <<Device>>  {
          'artifacts
          artifact "webpage.html" as page
  }

  wet -- web : HTTP/S

  wet --> epub

  comm -- wet : <<deploy>>


  center footer "**Deployment View Diagram for WET**"
#+END_SRC

[[file:./B-7.png]]

Table 11. Deployment View Description
| Actor                               | Description                                                                                                        |
|-------------------------------------+--------------------------------------------------------------------------------------------------------------------|
| <<Device>> Linux-PC                 | Personal computer that is running a linux operating system such as Fedora Workstation Edition.                     |
| <<Environment>> Desktop Environment | Environment that provides a collection of graphical software for interacting with the computer's operating system. |
| <<Service>> Command-Line Interface  | Command-line (CLI) interface to communicate with WET such as Bash, Zsh, or Command Prompt.                         |
| <<System>> <<Executable>> WET       | Our system as an executable that can be called from a command line interface.                                      |
| <<Category>> webpage.html           | Category of artifacts that are retrieved from a Webpage Server.                                                    |
| output.epub                         | Requested webpages assorted into an epub.

* Cross-cutting Concepts
** Cloudflare
The key problem in creating any webscraper is bypassing site protections that prevent scrapers from accessing a site. These site protections are typically implemented by content delivery networks (CDN). One popular CDN is Cloudflare which connects approximately 10% of all websites.

Cloudflare detects bots with a multitude of methods including but not limited to TLS Fingerprinting, HTTP/2 Fingerprint, Canvas Fingerprinting, Captchas, and Browser specific api. With so many methods used it questions how our webscraper will function?

To bypass such methods we need to identify the common link between them, which is that all of these methods try to separate user action and computer automated action. So, in order to bypass such protections we must follow two principles.

+ Emulate user browsing behavior
+ Fallback to the user when we are stumped

Cloudflare Fallback Behavior: 
file:../tests/TestingSeleniumedTorBrowser.cs::95

** Tor Relays
Achieving our anonymity quality requires us to implement measures when accessing the web. These measures include using Tor Relays to access webpages.

Tor Relays achieve anonymity by encrypting messages in multiple layers to be decrypted by selective computers in a chain. Each message goes through an:
1) Guard node, which knows the originator but not the message as its encrypted
2) Middle node, which knows the guard node but neither the originator or the message
3) Exit node, which knows the message and middle node but not the originator

To acquire these benefits the WET shall always use Tor Relays to access webpages.

* Architecture Decisions
** Tor Browser
25/03/02
Table 12. Architecture Decision 1 Description
| Section      | Description|
||
| Title        | ADR 1: Anonymity with Tor Browser|
| Context      | Anonymity is to know an action but not who is comitting it. To not know who is committing but know what they are comitting requires that each action an anonymous person commits could possibly be done by someone else. We can accept this as true if we consider the opposite situation, if an action can only be done by one person then every time such an action is performed we could easily identify who is performing it. Furthermore, the fewer someone elses there are, the more unique we become, and the less anonymous we shall be. So, how do we ensure that our actions are identityless i.e. anonymous? |
| Decision     | To ensure we are identityless we must adopt similar traits to others and hide our real-world identities. Our solution is to use the Tor Browser which with Tor Relays ensures that the servers we access do not know the sender, and a browser that obfusicates between its users.                                                                                                                                                                                                                                                                                                                                      |
| Status       | Accepted                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Consequences | Will increase the anonymity quality of the user; Web automation tools may not support or easily support our configuration; May increase the chances of encountering Site Protections from Cloudflare compared to normal browsing; Will increase the required setup for the system on the user's end; Will make emulating a user browser environment easier.                                                                                                                                                                                                                                                             |

** Selenium
25/03/09
Table 12. Architecture Decision 2 Description
| Section      | Description                                                                                                                                                                                                                                                                                                               |
|--------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Title        | ADR 2: Automation with Selenium                                                                                                                                                                                                                                                                                           |
| Context      | Browsers are a necessary component in bypassing bot protections as they are typical in a user environment. Emulating the user environment should not hinder functionality so the browser should be automated. Furthermore, any such tool should be compatible with C# and the Tor Browser. |
| Decision     | The Selenium browser is a popular solution that can be set up to imitate an user browsing environment, compatible with the Tor Browser, and has a C# API.                                                                                           |
| Status       | Accepted                                                                                                                                                                                                                                                                                                                  |
| Consequences | Will increase memory usage on the host; May limit web scraping depending on the host's memory; Will automate requesting content from webpages; May increase the chances of encountering Site Protections from Cloudflare compared to normal browsing;

** Main Webpage/Referenced Webpages
25/03/09

Table 13. Architecture Decision 3 Description
| Section      | Description                                                                                                                                                                                                                                                                                                                                              |
|--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Title        | ADR 3: The Main Webpage/Referenced WebPages Pattern                                                                                                                                                                                                                                                                                               |
| Context      | Sites that seperate related content into multiple webpages will usually reference them within one main webpage. For example, a webnovel will reference its chapters in a table of contents page or a wiki may organize its articles into a map of content page. Our software's purpose is to aggregate these seperate but related webpages into an epub. |
| Decision     | To take advantage we must design our piece of software to look for hyperlinks according to a pattern within a main webpage and aggregate these referenced webpages together.                                                                                                                                                                           |
| Status       | Accepted                                                                                                                                                                                                                                                                                                                                                 |
| Consequences | Limits software to only one degree of reference; Increases required setup from user; Simplifies web scraping by limiting amount of processing necessary to find pages; May lessen memory load on host machine due to fewer web accesses; |

** HTML to XHTML
25/03/09
Table 14. Architecture Decision 4 Description
| Section      | Description                                                                                                                                                                                                                                                                                                                              |
|--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Title        | ADR 4: Converting HTML to XHTML with AngleSharp                                                                                                                                                                                                                                                                                          |
| Context      | The EPUB format is a zipped XHTML, CSS, and any images and fonts files with a .epub extension. Webpages on the internet are formatted in .html. XHTML is a stricter version of HTML where improper formatting is not ignored as it is with HTML. Even with improper formatting HTML will still display in browsers while XHTML will not. |
| Decision     | In order to convert HTML to XHTML and parse HTML pages for links the AngleSharp parser will be used within this project.                                                                                                                                                                                                                 |
| Status       | Accepted                                                                                                                                                                                                                                                                                                                                 |
| Consequences | Will allow us to create epubs; May not convert XHTML correctly; Will increase creating Epub wait time; Will allow us to parselinks within a html document.                                                                                                                                                                               |

Table 15. HTML Parser Pugh Matrix
|          |                      |       Baseline |          A |               B |         C |
|----------+----------------------+----------------+------------+-----------------+-----------|
| Criteria | Criteria Description | Pandoc CL Tool | AngleSharp | HTMLAgilityPack | HTMLToXml |
|        1 | Reliability          |              0 |         +1 |               0 |        -1 |
|        2 | Security             |              0 |         +1 |              +1 |        +1 |
|        3 | Ease of Use          |              0 |         -1 |              -1 |        -1 |
|        4 | Control              |              0 |         +1 |              +1 |         0 |

25/05/27
Table 16. Architecture Decision 4 Description
| Section      | Description                                                                                                                                                                                                                                                                                                                                                                                 |
|--------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Title        | ADR 4: Converting HTML to XHTML Manually                                                                                                                                                                                                                                                                                                                                                    |
| Context      | The EPUB format is a zipped XHTML, CSS, and any images and fonts files with a .epub extension. Webpages on the internet are formatted in .html. XHTML is a stricter version of HTML where improper formatting is not ignored as it is with HTML. Even with improper formatting HTML will still display in browsers while XHTML will not. Selenium can retrieve visible text from a webpage. |
| Decision     | Convert HTML to XHTML by retrieving the visible text in a webpage and programatically creating a xhtml file.                                                                                                                                                                                                                                                                                |
| Status       | Accepted                                                                                                                                                                                                                                                                                                                                                                                    |
| Consequences | Will allow us to create epubs; Will convert XHTML correctly everytime; Will increase creating Epub wait time; 

Table 17. HTML to XHTML Pugh Matrix
|          |                      |       Baseline |          A |               B |         C |                    D |
|----------+----------------------+----------------+------------+-----------------+-----------+----------------------|
| Criteria | Criteria Description | Pandoc CL Tool | AngleSharp | HTMLAgilityPack | HTMLToXml | Manual HTML to XTHML |
|        1 | Reliability          |              0 |         +1 |               0 |        -1 |                   +2 |
|        2 | Security             |              0 |         +1 |              +1 |        +1 |                   +2 |
|        3 | Ease of Use          |              0 |         -1 |              -1 |        -1 |                   -1 |
|        4 | Control              |              0 |         +1 |              +1 |        +1 |                   +2 |
|        5 | Installation         |              0 |          0 |               0 |         0 |                   +1 |

* Quality Requirements
** Quality List
The following list contains all of the relevant quality attributes and their associated scenarios.
Table 16. Quality Attribute and Scenarios
| Quality Attribute | Scenarios |
|-------------------+-----------|
| Understandibility | W02, W03  |
| Testability       | W03       |
| Functionality     | W01       |
| Anonymity         | W04       |

** Quality Scenarios
The following scenarios measure the fulfillment of our quality attributes.
Table 17. Description of Scenarios
| No. | Scenario                                                                                                                                                                                                                                                                 |
|-----+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| W01 | A user plans to download the top 10 novels from [[https://www.novelupdates.com/series-ranking/][novelupdates.]] He is able to download atleast 7 of the top 10 novels using the WET.                                                                                                                                       |
| W02 | A recruiter with basic knowledge of UML looks for an overview on the implementation of the WET. He understands the overall design of this WET within 15 minutes using this document.                                                                                     |
| W03 | An open source developer is looking for a code example to implement his own web scraper. He is able to find a test case that displays the WET's functionality in an understandable manner.                                                                               |
| W04 | A potential user is looking for an anonymous alternative to common web to epub aggregators, he finds that the WET meet his requirements. The user uses the WET and finds that all of his requests were done through TOR ensuring that his epubs are created anonymously. |

* Risks and Technical Debts
** TR1: Stricter Bot Protections
Description: Cloudflare and other CDNs change their bot detection tools regularly so what may work today may not work tomorrow.

Mitigation: The Retrieve Requests Blackbox should be implemented first and documented with test cases so as to identify and reimplement functionality promptly.
** TR2: TOR Blocked
Description: The TOR network may be blocked in the users' area.

Mitigation: Enable bridges for Tor Browser when necessary.
** TR3: Improper XHTML
Description: Even if HTML is improper it is still rendered by the browser while XHTML must have proper syntax. When converting HTML to XHTML it is possible that the converted XHTML is invalid due to broken syntax.

Mitigation: Use a manual HTML to XHTML method that ensures Html is always converted properly.
