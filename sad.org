* Introduction and Goals
The Web to Epub with Tor (WETC) project shall automate the task of compiling referenced webpages within a website into a local Electronic Publicaton.

The goal of the WETC project is to save time by automating a routine task, ensure anonymity when retrieving content, and showcase the developers' skill.

** Requirements Overview
Table 1. General Requirements
| ID   | Feature                                                                                                             |
|------+---------------------------------------------------------------------------------------------------------------------|
| PF-1 | The product shall use standard tor relays to retrieve online content.                                               |
| PF-2 | The product shall collect specific hyperlinks within a website using a matching pattern given by the user           |
| PF-3 | The product shall save the specified webpages' content.                                                             |
| PF-4 | The product shall assemble the saved webpages into a single continuous EPUB file in an order specified by the user. |
| PF-5 | The product shall export the completed EPUB file to the user's preferred folder.                                    |

** Quality Goals
Table 2. Quality Goals
| Quality     | Scenario                                     |
|-------------+----------------------------------------------|
| Usability   | Most webpages are accessible.                 |
| Performance | Downloading webpages does not take too long. |
| Security    | Accessing webpages happens only through tor.  |
| Security    | A new tor identity is used for each session. |

** Stakeholders
Table 3. Stakeholders
| Role    | Goal                                               |
|---------+----------------------------------------------------|
| Users   | Looking to automate a repetitive task anonymously. |
| Hirers  | Understand the developers' skill.                  |
| Ali Ali | Showcase and improve his skills, also a user.      |

* Architecture Constraints
Table 4. Software and Programming Constraints
| ID  | Constraint                                                                                                           | Background and / or motivation                                                            |
|-----+----------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------|
| TC1 | Implementation in C#                                                                                                 | The application should showcase the developers' C# skill.                                 |
| TC2 | Third party software must be available under an compatible open source license and installable via a package manager | The source code must be open for examination to guarentee the users information is secure |

Table 5. Operating System Constraints
| ID  | Constraint                      | Explanation                                            |
|-----+---------------------------------+--------------------------------------------------------|
| TC3 | Windows 10 (latest) and Linux Fedora Workstation Edition (latest) Compatibility           | The application should be compatible with both windows |
|     |                                 |                                                        |

* Context and Scope

** Business Context
#+BEGIN_SRC plantuml :file ~/org/WebtoEpubwithTor/B-1.png
  @startuml
  <style>
  agent {
          MinimumWidth 75
          }
          </style>
          skinparam AgentBorderThickness 2
          skinparam shadowing true
          skinparam defaultTextAlignment center
          skinparam AgentStereotypeFontSize 14
          skinparam footerFontSize 15
          skinparam footerFontColor Black
          agent "**WET**" as WET #lightgray
          agent "Requested Webpage " as Host <<Host>> #white
          WET -ri-> Host : Webpage Requests
          Host -le-> WET : Webpage Content
          center footer "**WET Business Context**"
  @enduml
#+End_SRC
[[file:B-1.png][Business Context for WET]]
#+RESULTS:

| Neighbor System | Exchanged Data                                                       | Format |
|-----------------+----------------------------------------------------------------------+--------|
| Host (inbound)  | Webpage Content: Headings, Paragaphs, Images, Link, other Multimedia | HTML   |
| Host (outbound) | Webpage Requests: Hyperlink(s)                                       | String |

** Technical Context
#+BEGIN_SRC plantuml :file ~/org/WebScrapingWithTOR/B-4.png
   @startuml
  <style>
  agent {
          MinimumWidth 75
          }
          </style>
          skinparam agentborderthickness 1
          skinparam shadowing true
          skinparam defaulttextalignment center
          skinparam agentstereotypefontsize 14
          skinparam footerfontsize 15
          skinparam footerFontColor black
          node "Web Server" as server {
          agent "Requested Webpage(s)" as host #White
                  }
          interface "tor relay" as relay <<Protocol>> #White
          node "User Hardware" as hwd #LightGray {
                  node "Local System" as dwe #White {
                          agent "**WET**" as WET <<Instance>> #White
                          agent "Command-Line Interface" as cli <<Instance>> #White

                          }
                          }
                          cli -right- WET
                          WET -right- relay
                          relay -right- host
                          center footer "**WET Technical Context**"
   @enduml
#+END_SRC

#+RESULTS:
[[file:B-2.png][Technical Context for WET]]
| Element                            | Description                                                                                               |
|------------------------------------+-----------------------------------------------------------------------------------------------------------|
| <<Instance>> Command Line Interace | An instance of a command-line interface to communicate with WET such as Bash, Zsh, or Command Prompt.     |
| <<Instance>> WET                   | An instance of a WET run by the user.                                                                     |
| Local System                       | User environment that is compatible with WET.                                                             |
| User Hardware                      | Physical server (typically a desktop computer), acessible by the user, that is running the local  system. |
| <<Protocol>> tor relay             | Remote server that transmits encrypted traffic anonymously.                                               |
| Web Server                         | Remote server where website content is stored. Tends to be behind a cloudfare proxy.                      |
| Request Webpage(s)                 | Content that user requested.                                                                              |


* Solution Strategy
| Goal/Requirement                  | Architecural Approach                                                                           | Details |
|-----------------------------------+-------------------------------------------------------------------------------------------------+---------|
| Usability (75% Site Acessibility) | Imitate user browsing by scraping through a web browser and handover to user to bypass captchas |         |
| Security (Tor circuits)           | Implement web automation                                                                        |         |

* Building Block View
** Level 1
#+BEGIN_SRC plantuml :file ~/org/WebtoEpubwithTor/B-3.png
       @startuml
               skinparam shadowing true
               skinparam defaulttextalignment center
               skinparam componentstereotypefontsize 14
               skinparam footerfontsize 15
               skinparam footerFontColor black
       component "WET" as WET <<System>> {
    folder "Retrieve-Links" as retrieve <<Subsystem>>
    folder "Generate-List" as generate <<Subsystem>>
    folder "Export-Epub" as export <<Subsystem>>
  retrieve -[hidden]> generate
  generate -[hidden]> export
     }
  component "Terminal" as term <<Desktop-App>>
  database "Generated Files" as file <<File-System>>
  database "Websites" as web <<System>>
  retrieve -le-> web
  retrieve -do-> file
  generate -do-> file
  export

       @enduml
#+END_SRC

#+RESULTS:
[[file:~/org/WebtoEpubwithTor/B-3.png]]

** Level 2
** Level 3
* Runtime View
** [Runtime Scenario n]
* Deployment View
** Infrastructure Level 1
*** Overview Diagram
*** Motivation
*** Quality and/or Performance Features
*** Mapping of Building Blocks to Infrastructure
** Infrastructure Level 2
*** [Infrastructure Element n]
* Cross-cutting Concepts
** [Concept n]
* Architecture Decisions
* Quality Requirements
** Quality Tree
** Quality Scenarios
* Risks and Technical Debts
* Glossary
